{"doc":"","fields":[{"name":"RE_KEYS","doc":" 正则中需要被转义的关键字\n"}],"enumConstants":[],"methods":[{"name":"replaceAll","paramTypes":["java.lang.CharSequence","java.lang.String","java.lang.String"],"doc":" 正则替换指定值<br>\n 通过正则查找到字符串，然后把匹配到的字符串加入到replacementTemplate中，$1表示分组1的字符串\n\n <p>\n 例如：原字符串是：中文1234，我想把1234换成(1234)，则可以：\n\n <pre>\n ReUtil.replaceAll(\"中文1234\", \"(\\\\d+)\", \"($1)\"))\n\n 结果：中文(1234)\n </pre>\n\n @param content             文本\n @param regex               正则\n @param replacementTemplate 替换的文本模板，可以使用$1类似的变量提取正则匹配出的内容\n @return 处理后的文本\n"},{"name":"replaceAll","paramTypes":["java.lang.CharSequence","java.util.regex.Pattern","java.lang.String"],"doc":" 正则替换指定值<br>\n 通过正则查找到字符串，然后把匹配到的字符串加入到replacementTemplate中，$1表示分组1的字符串\n\n @param content             文本\n @param pattern             {@link Pattern}\n @param replacementTemplate 替换的文本模板，可以使用$1类似的变量提取正则匹配出的内容\n @return 处理后的文本\n @since 3.0.4\n"},{"name":"findAll","paramTypes":["java.util.regex.Pattern","java.lang.CharSequence","int","java.util.Collection"],"doc":" 取得内容中匹配的所有结果\n\n @param <T>        集合类型\n @param pattern    编译后的正则模式\n @param content    被查找的内容\n @param group      正则的分组\n @param collection 返回的集合类型\n @return 结果集\n"},{"name":"escape","paramTypes":["char"],"doc":" 转义字符，将正则的关键字转义\n\n @param c 字符\n @return 转义后的文本\n"},{"name":"escape","paramTypes":["java.lang.CharSequence"],"doc":" 转义字符串，将正则的关键字转义\n\n @param content 文本\n @return 转义后的文本\n"}],"constructors":[]}