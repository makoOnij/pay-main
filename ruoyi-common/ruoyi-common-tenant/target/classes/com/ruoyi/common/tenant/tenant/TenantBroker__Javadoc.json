{"doc":" 租户运行时代理<br/>\n 这是一个工具类，用于切换租户运行时，保护租户ID上下文<br/>\n 下面这段代码演示问题所在 <pre>\n     void methodA(){\n         // 因为某些特殊原因，需要手动指定租户\n         TenantContextHolder.setTenantId(1);\n         // do something ...\n     }\n     void methodB(){\n         // 因为某些特殊原因，需要手动指定租户\n         TenantContextHolder.setTenantId(2);\n         methodA();\n         // 此时租户ID已经变成 1\n         // do something ...\n     }\n </pre> 嵌套设置租户ID会导致租户上下文难以维护,并且很难察觉，容易导致数据错乱。 推荐的写法： <pre>\n     void methodA(){\n         TenantBroker.RunAs(1,() -> {\n             // do something ...\n         });\n     }\n     void methodB(){\n         TenantBroker.RunAs(2,() -> {\n              methodA();\n             // do something ...\n         });\n     }\n </pre>\n\n @author CJ (jclazz@outlook.com)\n @date 2020/6/12\n @since 3.9\n","fields":[],"enumConstants":[],"methods":[{"name":"runAs","paramTypes":["java.lang.Long","com.ruoyi.common.tenant.tenant.TenantBroker.RunAs"],"doc":" 以某个租户的身份运行\n @param tenant 租户ID\n @param func\n"},{"name":"applyAs","paramTypes":["java.lang.Long","com.ruoyi.common.tenant.tenant.TenantBroker.ApplyAs"],"doc":" 以某个租户的身份运行\n @param tenant 租户ID\n @param func\n @param <T> 返回数据类型\n @return\n"},{"name":"runAs","paramTypes":["java.util.function.Supplier","com.ruoyi.common.tenant.tenant.TenantBroker.RunAs"],"doc":" 以某个租户的身份运行\n @param supplier\n @param func\n"},{"name":"applyAs","paramTypes":["java.util.function.Supplier","com.ruoyi.common.tenant.tenant.TenantBroker.ApplyAs"],"doc":" 以某个租户的身份运行\n @param supplier\n @param func\n @param <T> 返回数据类型\n @return\n"}],"constructors":[]}