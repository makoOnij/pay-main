{"doc":" The type Session holder.\n\n @author sharajava\n","fields":[{"name":"CONFIG","doc":" The constant CONFIG.\n"},{"name":"ROOT_SESSION_MANAGER_NAME","doc":" The constant ROOT_SESSION_MANAGER_NAME.\n"},{"name":"ASYNC_COMMITTING_SESSION_MANAGER_NAME","doc":" The constant ASYNC_COMMITTING_SESSION_MANAGER_NAME.\n"},{"name":"RETRY_COMMITTING_SESSION_MANAGER_NAME","doc":" The constant RETRY_COMMITTING_SESSION_MANAGER_NAME.\n"},{"name":"RETRY_ROLLBACKING_SESSION_MANAGER_NAME","doc":" The constant RETRY_ROLLBACKING_SESSION_MANAGER_NAME.\n"},{"name":"DEFAULT_SESSION_STORE_FILE_DIR","doc":" The default session store dir\n"},{"name":"DISTRIBUTED_LOCK_EXPIRE_TIME","doc":" The redis distributed lock expire time\n"}],"enumConstants":[],"methods":[{"name":"init","paramTypes":["io.seata.server.store.StoreConfig.SessionMode"],"doc":" Init.\n\n @param sessionMode the store mode: file, db, redis\n @throws IOException the io exception\n"},{"name":"reload","paramTypes":["io.seata.server.store.StoreConfig.SessionMode"],"doc":" Reload.\n\n @param sessionMode the mode of store\n"},{"name":"getRootSessionManager","paramTypes":[],"doc":" Gets root session manager.\n\n @return the root session manager\n"},{"name":"getAsyncCommittingSessionManager","paramTypes":[],"doc":" Gets async committing session manager.\n\n @return the async committing session manager\n"},{"name":"getRetryCommittingSessionManager","paramTypes":[],"doc":" Gets retry committing session manager.\n\n @return the retry committing session manager\n"},{"name":"getRetryRollbackingSessionManager","paramTypes":[],"doc":" Gets retry rollbacking session manager.\n\n @return the retry rollbacking session manager\n"},{"name":"findGlobalSession","paramTypes":["java.lang.String"],"doc":" Find global session.\n\n @param xid the xid\n @return the global session\n"},{"name":"findGlobalSession","paramTypes":["java.lang.String","boolean"],"doc":" Find global session.\n\n @param xid                the xid\n @param withBranchSessions the withBranchSessions\n @return the global session\n"},{"name":"lockAndExecute","paramTypes":["io.seata.server.session.GlobalSession","io.seata.server.session.GlobalSession.LockCallable"],"doc":" lock and execute\n\n @param globalSession the global session\n @param lockCallable  the lock Callable\n @return the value\n"},{"name":"acquireDistributedLock","paramTypes":["java.lang.String"],"doc":" acquire lock\n\n @param lockKey the lock key, should be distinct for each lock\n @return the boolean\n"},{"name":"releaseDistributedLock","paramTypes":["java.lang.String"],"doc":" release lock\n\n @return the boolean\n"},{"name":"distributedLockAndExecute","paramTypes":["java.lang.String","io.seata.server.session.SessionHolder.NoArgsFunc"],"doc":" Execute the function after get the distribute lock\n\n @param key  the distribute lock key\n @param func the function to be call\n @return whether the func be call\n"}],"constructors":[]}