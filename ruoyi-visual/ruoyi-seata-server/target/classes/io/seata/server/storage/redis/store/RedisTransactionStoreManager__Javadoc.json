{"doc":" The redis transaction store manager\n\n @author funkye\n @author wangzhongxiang\n @author doubleDimple\n","fields":[{"name":"REDIS_SEATA_BRANCHES_PREFIX","doc":"the prefix of the branch transactions"},{"name":"REDIS_SEATA_BRANCH_PREFIX","doc":"the prefix of the branch transaction"},{"name":"REDIS_SEATA_GLOBAL_PREFIX","doc":"the prefix of the global transaction"},{"name":"REDIS_SEATA_STATUS_PREFIX","doc":"the prefix of the global transaction status"},{"name":"REDIS_SEATA_BEGIN_TRANSACTIONS_KEY","doc":"the key of global transaction status for begin"},{"name":"CONFIG","doc":" The constant CONFIG.\n"},{"name":"logQueryLimit","doc":" The Log query limit.\n"},{"name":"globalMap","doc":" Map for LogOperation Global Operation\n"},{"name":"branchMap","doc":" Map for LogOperation Branch Operation\n"}],"enumConstants":[],"methods":[{"name":"getInstance","paramTypes":[],"doc":" Get the instance.\n"},{"name":"initGlobalMap","paramTypes":[],"doc":" init globalMap\n\n"},{"name":"initBranchMap","paramTypes":[],"doc":" init branchMap\n\n"},{"name":"insertBranchTransactionDO","paramTypes":["io.seata.core.store.BranchTransactionDO"],"doc":" Insert branch transaction\n @param branchTransactionDO\n @return the boolean\n"},{"name":"deleteBranchTransactionDO","paramTypes":["io.seata.core.store.BranchTransactionDO"],"doc":" Delete the branch transaction\n @param branchTransactionDO\n @return\n"},{"name":"updateBranchTransactionDO","paramTypes":["io.seata.core.store.BranchTransactionDO"],"doc":" Update the branch transaction\n @param branchTransactionDO\n @return\n"},{"name":"insertGlobalTransactionDO","paramTypes":["io.seata.core.store.GlobalTransactionDO"],"doc":" Insert the global transaction.\n @param globalTransactionDO\n @return\n"},{"name":"deleteGlobalTransactionDO","paramTypes":["io.seata.core.store.GlobalTransactionDO"],"doc":" Delete the global transaction.\n It will operate two parts:\n  1.delete the global session map\n  2.remove the xid from the global status list\n If the operate failed,the succeed operates will rollback\n @param globalTransactionDO\n @return\n"},{"name":"updateGlobalTransactionDO","paramTypes":["io.seata.core.store.GlobalTransactionDO"],"doc":" Update the global transaction.\n It will update two parts:\n  1.the global session map\n  2.the global status list\n If the update failed,the succeed operates will rollback\n @param globalTransactionDO\n @return\n"},{"name":"readSession","paramTypes":["java.lang.String","boolean"],"doc":" Read session global session.\n\n @param xid the xid\n @param withBranchSessions  the withBranchSessions\n @return the global session\n"},{"name":"readSession","paramTypes":["java.lang.String"],"doc":" Read session global session.\n\n @param xid\n            the xid\n @return the global session\n"},{"name":"readSession","paramTypes":["io.seata.core.model.GlobalStatus[]","boolean"],"doc":" Read globalSession list by global status\n\n @param statuses the statuses\n @return the list\n"},{"name":"resetLogQueryLimit","paramTypes":["java.util.Map"],"doc":" get everyone keys limit\n\n @param targetMap\n @return\n"},{"name":"readSession","paramTypes":["io.seata.server.session.SessionCondition"],"doc":" read the global session list by different condition\n @param sessionCondition the session condition\n @return the global sessions\n"},{"name":"readSessionStatusByPage","paramTypes":["io.seata.server.console.param.GlobalSessionParam"],"doc":" query GlobalSession by status with page\n\n @param param\n @return List<GlobalSession>\n"},{"name":"getGlobalSession","paramTypes":["io.seata.core.store.GlobalTransactionDO","java.util.List","boolean"],"doc":" assemble the global session and branch session\n @param globalTransactionDO the global transactionDo\n @param branchTransactionDOs the branch transactionDos\n @param withBranchSessions if read branch sessions\n @return the global session with branch session\n"},{"name":"readSessionByTransactionId","paramTypes":["java.lang.String","boolean"],"doc":" read the global session by transactionId\n @param transactionId the transaction id\n @param withBranchSessions if read branch sessions\n @return the global session\n"},{"name":"readBranchSessionByXid","paramTypes":["redis.clients.jedis.Jedis","java.lang.String"],"doc":" Read the branch session list by xid\n @param jedis the jedis\n @param xid the xid\n @return the branch transactionDo list\n"},{"name":"findGlobalSessionByPage","paramTypes":["int","int","boolean"],"doc":" query globalSession by page\n\n @param pageNum\n @param pageSize\n @param withBranchSessions\n @return List<GlobalSession>\n"},{"name":"calculateStatuskeysHasData","paramTypes":["java.util.List"],"doc":" query and sort existing values\n\n @param statusKeys\n @return\n"},{"name":"countByGlobalSessions","paramTypes":["io.seata.core.model.GlobalStatus[]"],"doc":" count GlobalSession total by status\n\n @param values\n @return Long\n"},{"name":"setLogQueryLimit","paramTypes":["int"],"doc":" Sets log query limit.\n\n @param logQueryLimit the log query limit\n"}],"constructors":[{"name":"<init>","paramTypes":[],"doc":" init map to constructor\n"}]}